import glob from 'glob';
import { write } from '../files.js';

function zip(arrays) {
    return Array.apply(null,Array(arrays[0].length)).map(function(_,i){
        return arrays.map(function(array){return array[i]})
    });
}

function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

function kebabToPascalCase(string) {
    return string
        .split('-')
        .map((word, i) => i > 0 ? capitalize(word) : word)
        .join('');
}

export default function generateComponentsLibrary(options, site) {
    const { componentsDir: dir = null } = options || {};
    const destination = `./sites/${site.id}`;
    const filename = `chunky.library.js`;
    const fileGlob = `${dir}/**/*.js`; // @todo
    const paths = glob.sync(fileGlob, {}) || [];
    const shortPaths = paths.map(path => path.replace(dir, '').replace('.js', '').replace('/', ''));
    const names = shortPaths.map(path => path.replaceAll('/', '-').toLowerCase());
    const ids = names.map(kebabToPascalCase);
    const components = zip([ids, names, shortPaths]); // @todo make it return a goddamn object
    const imports = ([id, shortPath]) => (`import ${id} from './${shortPath}.js';
    `);
    const exports = ([id, name]) => (`import ${id} from './${shortPath}.js';
    `);
    const template = `/*
This file was generated by Chunky!
You may edit it at your own risk :)
*/

${components.map(([id, shortPath]) => `
import ${id} from './${shortPath}.js';

`)}

// here we're listing all the components and
//  re-exporting them all as a global object for easy read by Chunky
export default {
${components.map(([id, name]) => `
    '${name}': ${id},
`)}
}
`;

    return write(destination, filename, template, site);
}
